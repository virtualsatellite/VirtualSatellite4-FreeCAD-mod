# coding: utf-8

"""
    The Model API

    API to access the Virtual Satellite data model  # noqa: E501

    OpenAPI spec version: v0.0.1

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from plugins.VirtualSatelliteRestPlugin.generated_api.v0_0_1.swagger_client.configuration import Configuration


class ABeanUnit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'uuid': 'AUnit',
        'quantity_kind_bean': 'ABeanQuantityKindAQuantityKind',
        'name': 'str'
    }

    attribute_map = {
        'symbol': 'symbol',
        'uuid': 'uuid',
        'quantity_kind_bean': 'quantityKindBean',
        'name': 'name'
    }

    def __init__(self, symbol=None, uuid=None, quantity_kind_bean=None, name=None, _configuration=None):  # noqa: E501
        """ABeanUnit - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._symbol = None
        self._uuid = None
        self._quantity_kind_bean = None
        self._name = None
        self.discriminator = None

        self.symbol = symbol
        self.uuid = uuid
        self.quantity_kind_bean = quantity_kind_bean
        self.name = name

    @property
    def symbol(self):
        """Gets the symbol of this ABeanUnit.  # noqa: E501


        :return: The symbol of this ABeanUnit.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this ABeanUnit.


        :param symbol: The symbol of this ABeanUnit.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def uuid(self):
        """Gets the uuid of this ABeanUnit.  # noqa: E501

        Unique identifier for a bean  # noqa: E501

        :return: The uuid of this ABeanUnit.  # noqa: E501
        :rtype: AUnit
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ABeanUnit.

        Unique identifier for a bean  # noqa: E501

        :param uuid: The uuid of this ABeanUnit.  # noqa: E501
        :type: AUnit
        """
        if self._configuration.client_side_validation and uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def quantity_kind_bean(self):
        """Gets the quantity_kind_bean of this ABeanUnit.  # noqa: E501


        :return: The quantity_kind_bean of this ABeanUnit.  # noqa: E501
        :rtype: ABeanQuantityKindAQuantityKind
        """
        return self._quantity_kind_bean

    @quantity_kind_bean.setter
    def quantity_kind_bean(self, quantity_kind_bean):
        """Sets the quantity_kind_bean of this ABeanUnit.


        :param quantity_kind_bean: The quantity_kind_bean of this ABeanUnit.  # noqa: E501
        :type: ABeanQuantityKindAQuantityKind
        """
        if self._configuration.client_side_validation and quantity_kind_bean is None:
            raise ValueError("Invalid value for `quantity_kind_bean`, must not be `None`")  # noqa: E501

        self._quantity_kind_bean = quantity_kind_bean

    @property
    def name(self):
        """Gets the name of this ABeanUnit.  # noqa: E501


        :return: The name of this ABeanUnit.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ABeanUnit.


        :param name: The name of this ABeanUnit.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ABeanUnit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ABeanUnit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ABeanUnit):
            return True

        return self.to_dict() != other.to_dict()
