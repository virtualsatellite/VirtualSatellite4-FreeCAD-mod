# coding: utf-8

"""
    The Model API

    API to access the Virtual Satellite data model  # noqa: E501

    OpenAPI spec version: v0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from plugins.VirtualSatelliteRestPlugin.generated_api.v0_0_1.swagger_client.configuration import Configuration


class ABeanStructuralElementInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'super_seis': 'list[BeanStructuralElementInstanceReference]',
        'children': 'list[BeanStructuralElementInstanceReference]',
        'assigned_discipline': 'BeanDiscipline',
        'category_assignments': 'list[BeanCategoryAssignment]',
        'uuid': 'str',
        'name': 'str',
        'parent': 'str'
    }

    attribute_map = {
        'super_seis': 'superSeis',
        'children': 'children',
        'assigned_discipline': 'assignedDiscipline',
        'category_assignments': 'categoryAssignments',
        'uuid': 'uuid',
        'name': 'name',
        'parent': 'parent'
    }

    def __init__(self, super_seis=None, children=None, assigned_discipline=None, category_assignments=None, uuid=None, name=None, parent=None, _configuration=None):  # noqa: E501
        """ABeanStructuralElementInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._super_seis = None
        self._children = None
        self._assigned_discipline = None
        self._category_assignments = None
        self._uuid = None
        self._name = None
        self._parent = None
        self.discriminator = None

        self.super_seis = super_seis
        self.children = children
        if assigned_discipline is not None:
            self.assigned_discipline = assigned_discipline
        self.category_assignments = category_assignments
        self.uuid = uuid
        self.name = name
        self.parent = parent

    @property
    def super_seis(self):
        """Gets the super_seis of this ABeanStructuralElementInstance.  # noqa: E501

        List of the super SEI beans  # noqa: E501

        :return: The super_seis of this ABeanStructuralElementInstance.  # noqa: E501
        :rtype: list[BeanStructuralElementInstanceReference]
        """
        return self._super_seis

    @super_seis.setter
    def super_seis(self, super_seis):
        """Sets the super_seis of this ABeanStructuralElementInstance.

        List of the super SEI beans  # noqa: E501

        :param super_seis: The super_seis of this ABeanStructuralElementInstance.  # noqa: E501
        :type: list[BeanStructuralElementInstanceReference]
        """
        if self._configuration.client_side_validation and super_seis is None:
            raise ValueError("Invalid value for `super_seis`, must not be `None`")  # noqa: E501

        self._super_seis = super_seis

    @property
    def children(self):
        """Gets the children of this ABeanStructuralElementInstance.  # noqa: E501

        List of the child beans  # noqa: E501

        :return: The children of this ABeanStructuralElementInstance.  # noqa: E501
        :rtype: list[BeanStructuralElementInstanceReference]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this ABeanStructuralElementInstance.

        List of the child beans  # noqa: E501

        :param children: The children of this ABeanStructuralElementInstance.  # noqa: E501
        :type: list[BeanStructuralElementInstanceReference]
        """
        if self._configuration.client_side_validation and children is None:
            raise ValueError("Invalid value for `children`, must not be `None`")  # noqa: E501

        self._children = children

    @property
    def assigned_discipline(self):
        """Gets the assigned_discipline of this ABeanStructuralElementInstance.  # noqa: E501

        Uuid of the referenced Discipline that can edit this SEI  # noqa: E501

        :return: The assigned_discipline of this ABeanStructuralElementInstance.  # noqa: E501
        :rtype: BeanDiscipline
        """
        return self._assigned_discipline

    @assigned_discipline.setter
    def assigned_discipline(self, assigned_discipline):
        """Sets the assigned_discipline of this ABeanStructuralElementInstance.

        Uuid of the referenced Discipline that can edit this SEI  # noqa: E501

        :param assigned_discipline: The assigned_discipline of this ABeanStructuralElementInstance.  # noqa: E501
        :type: BeanDiscipline
        """

        self._assigned_discipline = assigned_discipline

    @property
    def category_assignments(self):
        """Gets the category_assignments of this ABeanStructuralElementInstance.  # noqa: E501

        List of the CA beans  # noqa: E501

        :return: The category_assignments of this ABeanStructuralElementInstance.  # noqa: E501
        :rtype: list[BeanCategoryAssignment]
        """
        return self._category_assignments

    @category_assignments.setter
    def category_assignments(self, category_assignments):
        """Sets the category_assignments of this ABeanStructuralElementInstance.

        List of the CA beans  # noqa: E501

        :param category_assignments: The category_assignments of this ABeanStructuralElementInstance.  # noqa: E501
        :type: list[BeanCategoryAssignment]
        """
        if self._configuration.client_side_validation and category_assignments is None:
            raise ValueError("Invalid value for `category_assignments`, must not be `None`")  # noqa: E501

        self._category_assignments = category_assignments

    @property
    def uuid(self):
        """Gets the uuid of this ABeanStructuralElementInstance.  # noqa: E501

        Unique identifier for a bean  # noqa: E501

        :return: The uuid of this ABeanStructuralElementInstance.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ABeanStructuralElementInstance.

        Unique identifier for a bean  # noqa: E501

        :param uuid: The uuid of this ABeanStructuralElementInstance.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this ABeanStructuralElementInstance.  # noqa: E501


        :return: The name of this ABeanStructuralElementInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ABeanStructuralElementInstance.


        :param name: The name of this ABeanStructuralElementInstance.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this ABeanStructuralElementInstance.  # noqa: E501

        Unique identifier for the parent bean  # noqa: E501

        :return: The parent of this ABeanStructuralElementInstance.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this ABeanStructuralElementInstance.

        Unique identifier for the parent bean  # noqa: E501

        :param parent: The parent of this ABeanStructuralElementInstance.  # noqa: E501
        :type: str
        """
        self._parent = parent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ABeanStructuralElementInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ABeanStructuralElementInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ABeanStructuralElementInstance):
            return True

        return self.to_dict() != other.to_dict()
