# coding: utf-8

"""
    The Model API

    API to access the Virtual Satellite data model  # noqa: E501

    OpenAPI spec version: v0.0.1

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from plugins.VirtualSatelliteRestPlugin.generated_api.v0_0_1.swagger_client.configuration import Configuration


class Concept(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'description': 'str',
        'is_beta': 'bool',
        'categories': 'list[str]',
        'full_qualified_name': 'str',
        'structural_elements': 'list[str]',
        'non_abstract_categories': 'list[str]'
    }

    attribute_map = {
        'version': 'version',
        'description': 'description',
        'is_beta': 'isBeta',
        'categories': 'categories',
        'full_qualified_name': 'fullQualifiedName',
        'structural_elements': 'structuralElements',
        'non_abstract_categories': 'nonAbstractCategories'
    }

    def __init__(self, version=None, description=None, is_beta=None, categories=None, full_qualified_name=None, structural_elements=None, non_abstract_categories=None, _configuration=None):  # noqa: E501
        """Concept - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._version = None
        self._description = None
        self._is_beta = None
        self._categories = None
        self._full_qualified_name = None
        self._structural_elements = None
        self._non_abstract_categories = None
        self.discriminator = None

        if version is not None:
            self.version = version
        if description is not None:
            self.description = description
        if is_beta is not None:
            self.is_beta = is_beta
        if categories is not None:
            self.categories = categories
        if full_qualified_name is not None:
            self.full_qualified_name = full_qualified_name
        if structural_elements is not None:
            self.structural_elements = structural_elements
        if non_abstract_categories is not None:
            self.non_abstract_categories = non_abstract_categories

    @property
    def version(self):
        """Gets the version of this Concept.  # noqa: E501

        Version of the concept  # noqa: E501

        :return: The version of this Concept.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Concept.

        Version of the concept  # noqa: E501

        :param version: The version of this Concept.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def description(self):
        """Gets the description of this Concept.  # noqa: E501

        Description of the concept  # noqa: E501

        :return: The description of this Concept.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Concept.

        Description of the concept  # noqa: E501

        :param description: The description of this Concept.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_beta(self):
        """Gets the is_beta of this Concept.  # noqa: E501

        If the concept is still in a beta version  # noqa: E501

        :return: The is_beta of this Concept.  # noqa: E501
        :rtype: bool
        """
        return self._is_beta

    @is_beta.setter
    def is_beta(self, is_beta):
        """Sets the is_beta of this Concept.

        If the concept is still in a beta version  # noqa: E501

        :param is_beta: The is_beta of this Concept.  # noqa: E501
        :type: bool
        """

        self._is_beta = is_beta

    @property
    def categories(self):
        """Gets the categories of this Concept.  # noqa: E501

        List of available categories  # noqa: E501

        :return: The categories of this Concept.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Concept.

        List of available categories  # noqa: E501

        :param categories: The categories of this Concept.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def full_qualified_name(self):
        """Gets the full_qualified_name of this Concept.  # noqa: E501

        Full qualified name of the concept  # noqa: E501

        :return: The full_qualified_name of this Concept.  # noqa: E501
        :rtype: str
        """
        return self._full_qualified_name

    @full_qualified_name.setter
    def full_qualified_name(self, full_qualified_name):
        """Sets the full_qualified_name of this Concept.

        Full qualified name of the concept  # noqa: E501

        :param full_qualified_name: The full_qualified_name of this Concept.  # noqa: E501
        :type: str
        """

        self._full_qualified_name = full_qualified_name

    @property
    def structural_elements(self):
        """Gets the structural_elements of this Concept.  # noqa: E501

        List of available structural elements  # noqa: E501

        :return: The structural_elements of this Concept.  # noqa: E501
        :rtype: list[str]
        """
        return self._structural_elements

    @structural_elements.setter
    def structural_elements(self, structural_elements):
        """Sets the structural_elements of this Concept.

        List of available structural elements  # noqa: E501

        :param structural_elements: The structural_elements of this Concept.  # noqa: E501
        :type: list[str]
        """

        self._structural_elements = structural_elements

    @property
    def non_abstract_categories(self):
        """Gets the non_abstract_categories of this Concept.  # noqa: E501

        List of available categories that are not abstract (can be instantiated)  # noqa: E501

        :return: The non_abstract_categories of this Concept.  # noqa: E501
        :rtype: list[str]
        """
        return self._non_abstract_categories

    @non_abstract_categories.setter
    def non_abstract_categories(self, non_abstract_categories):
        """Sets the non_abstract_categories of this Concept.

        List of available categories that are not abstract (can be instantiated)  # noqa: E501

        :param non_abstract_categories: The non_abstract_categories of this Concept.  # noqa: E501
        :type: list[str]
        """

        self._non_abstract_categories = non_abstract_categories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Concept, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Concept):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Concept):
            return True

        return self.to_dict() != other.to_dict()
