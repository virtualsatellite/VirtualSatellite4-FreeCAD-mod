# coding: utf-8

"""
    The Model API

    API to access the Virtual Satellite data model  # noqa: E501

    OpenAPI spec version: v0.0.1

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from plugins.VirtualSatelliteRestPlugin.generated_api.v0_0_1.swagger_client.api_client import ApiClient


class QUDVApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_prefix(self, repo_name, **kwargs):  # noqa: E501
        """Create Prefix  # noqa: E501

        This service creates a new Prefix and returns it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_prefix(repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_prefix_with_http_info(repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_prefix_with_http_info(repo_name, **kwargs)  # noqa: E501
            return data

    def create_prefix_with_http_info(self, repo_name, **kwargs):  # noqa: E501
        """Create Prefix  # noqa: E501

        This service creates a new Prefix and returns it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_prefix_with_http_info(repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_prefix" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `create_prefix`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/qudv/prefix', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_quantity_kind(self, name, repo_name, **kwargs):  # noqa: E501
        """Create QuantityKind  # noqa: E501

        This service creates a new QuantityKind and returns it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_quantity_kind(name, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Quantity kind bean type to create an instance from (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_quantity_kind_with_http_info(name, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_quantity_kind_with_http_info(name, repo_name, **kwargs)  # noqa: E501
            return data

    def create_quantity_kind_with_http_info(self, name, repo_name, **kwargs):  # noqa: E501
        """Create QuantityKind  # noqa: E501

        This service creates a new QuantityKind and returns it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_quantity_kind_with_http_info(name, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Quantity kind bean type to create an instance from (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_quantity_kind" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `create_quantity_kind`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `create_quantity_kind`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/qudv/quantityKind', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_quantity_kind_factor(self, uuid, repo_name, **kwargs):  # noqa: E501
        """Create QuantityKindFactor  # noqa: E501

        This service creates a new QuantityKindFactor and returns it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_quantity_kind_factor(uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Parent quantity kind of the quantity kind factor (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_quantity_kind_factor_with_http_info(uuid, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_quantity_kind_factor_with_http_info(uuid, repo_name, **kwargs)  # noqa: E501
            return data

    def create_quantity_kind_factor_with_http_info(self, uuid, repo_name, **kwargs):  # noqa: E501
        """Create QuantityKindFactor  # noqa: E501

        This service creates a new QuantityKindFactor and returns it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_quantity_kind_factor_with_http_info(uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Parent quantity kind of the quantity kind factor (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_quantity_kind_factor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `create_quantity_kind_factor`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `create_quantity_kind_factor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/qudv/quantityKindFactor/{uuid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_unit(self, name, repo_name, **kwargs):  # noqa: E501
        """Create Unit  # noqa: E501

        This service creates a new Unit and returns it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_unit(name, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Unit bean type to create an instance from (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_unit_with_http_info(name, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_unit_with_http_info(name, repo_name, **kwargs)  # noqa: E501
            return data

    def create_unit_with_http_info(self, name, repo_name, **kwargs):  # noqa: E501
        """Create Unit  # noqa: E501

        This service creates a new Unit and returns it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_unit_with_http_info(name, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Unit bean type to create an instance from (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_unit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `create_unit`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `create_unit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/qudv/unit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_unit_factor(self, uuid, repo_name, **kwargs):  # noqa: E501
        """Create UnitFactor  # noqa: E501

        This service creates a new UnitFactor and returns it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_unit_factor(uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Parent unit of the unit factor (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_unit_factor_with_http_info(uuid, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_unit_factor_with_http_info(uuid, repo_name, **kwargs)  # noqa: E501
            return data

    def create_unit_factor_with_http_info(self, uuid, repo_name, **kwargs):  # noqa: E501
        """Create UnitFactor  # noqa: E501

        This service creates a new UnitFactor and returns it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_unit_factor_with_http_info(uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Parent unit of the unit factor (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_unit_factor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `create_unit_factor`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `create_unit_factor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/qudv/unitFactor/{uuid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_prefix(self, prefix_uuid, repo_name, **kwargs):  # noqa: E501
        """Delete Prefix  # noqa: E501

        This service deletes a Prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_prefix(prefix_uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefix_uuid: Uuid of the Prefix (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_prefix_with_http_info(prefix_uuid, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_prefix_with_http_info(prefix_uuid, repo_name, **kwargs)  # noqa: E501
            return data

    def delete_prefix_with_http_info(self, prefix_uuid, repo_name, **kwargs):  # noqa: E501
        """Delete Prefix  # noqa: E501

        This service deletes a Prefix.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_prefix_with_http_info(prefix_uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefix_uuid: Uuid of the Prefix (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prefix_uuid', 'repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_prefix" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prefix_uuid' is set
        if self.api_client.client_side_validation and ('prefix_uuid' not in params or
                                                       params['prefix_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `prefix_uuid` when calling `delete_prefix`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `delete_prefix`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'prefix_uuid' in params:
            path_params['prefixUuid'] = params['prefix_uuid']  # noqa: E501
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/qudv/prefix/{prefixUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_quantity_kind(self, quantity_kind_uuid, repo_name, **kwargs):  # noqa: E501
        """Delete QuantityKind  # noqa: E501

        This service deletes a QuantityKind.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_quantity_kind(quantity_kind_uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quantity_kind_uuid: Uuid of the QuantityKind (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_quantity_kind_with_http_info(quantity_kind_uuid, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_quantity_kind_with_http_info(quantity_kind_uuid, repo_name, **kwargs)  # noqa: E501
            return data

    def delete_quantity_kind_with_http_info(self, quantity_kind_uuid, repo_name, **kwargs):  # noqa: E501
        """Delete QuantityKind  # noqa: E501

        This service deletes a QuantityKind.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_quantity_kind_with_http_info(quantity_kind_uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quantity_kind_uuid: Uuid of the QuantityKind (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quantity_kind_uuid', 'repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_quantity_kind" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'quantity_kind_uuid' is set
        if self.api_client.client_side_validation and ('quantity_kind_uuid' not in params or
                                                       params['quantity_kind_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quantity_kind_uuid` when calling `delete_quantity_kind`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `delete_quantity_kind`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'quantity_kind_uuid' in params:
            path_params['quantityKindUuid'] = params['quantity_kind_uuid']  # noqa: E501
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/qudv/quantityKind/{quantityKindUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_quantity_kind_factor(self, uuid, repo_name, **kwargs):  # noqa: E501
        """Delete QuantityKindFactor  # noqa: E501

        This service deletes a QuantityKindFactor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_quantity_kind_factor(uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Uuid of the quantity kind factor (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_quantity_kind_factor_with_http_info(uuid, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_quantity_kind_factor_with_http_info(uuid, repo_name, **kwargs)  # noqa: E501
            return data

    def delete_quantity_kind_factor_with_http_info(self, uuid, repo_name, **kwargs):  # noqa: E501
        """Delete QuantityKindFactor  # noqa: E501

        This service deletes a QuantityKindFactor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_quantity_kind_factor_with_http_info(uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Uuid of the quantity kind factor (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_quantity_kind_factor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `delete_quantity_kind_factor`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `delete_quantity_kind_factor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/qudv/quantityKindFactor/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_unit(self, unit_uuid, repo_name, **kwargs):  # noqa: E501
        """Delete Unit  # noqa: E501

        This service deletes a Unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_unit(unit_uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unit_uuid: Uuid of the Unit (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_unit_with_http_info(unit_uuid, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_unit_with_http_info(unit_uuid, repo_name, **kwargs)  # noqa: E501
            return data

    def delete_unit_with_http_info(self, unit_uuid, repo_name, **kwargs):  # noqa: E501
        """Delete Unit  # noqa: E501

        This service deletes a Unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_unit_with_http_info(unit_uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unit_uuid: Uuid of the Unit (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unit_uuid', 'repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_unit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unit_uuid' is set
        if self.api_client.client_side_validation and ('unit_uuid' not in params or
                                                       params['unit_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `unit_uuid` when calling `delete_unit`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `delete_unit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unit_uuid' in params:
            path_params['unitUuid'] = params['unit_uuid']  # noqa: E501
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/qudv/unit/{unitUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_unit_factor(self, uuid, repo_name, **kwargs):  # noqa: E501
        """Delete UnitFactor  # noqa: E501

        This service deletes a UnitFactor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_unit_factor(uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Uuid of the unit factor (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_unit_factor_with_http_info(uuid, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_unit_factor_with_http_info(uuid, repo_name, **kwargs)  # noqa: E501
            return data

    def delete_unit_factor_with_http_info(self, uuid, repo_name, **kwargs):  # noqa: E501
        """Delete UnitFactor  # noqa: E501

        This service deletes a UnitFactor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_unit_factor_with_http_info(uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Uuid of the unit factor (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_unit_factor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `delete_unit_factor`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `delete_unit_factor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/qudv/unitFactor/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_prefix(self, prefix_uuid, repo_name, **kwargs):  # noqa: E501
        """Fetch Prefix  # noqa: E501

        This service fetches a Prefix  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_prefix(prefix_uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefix_uuid: Uuid of the Prefix (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: BeanPrefix
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_prefix_with_http_info(prefix_uuid, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_prefix_with_http_info(prefix_uuid, repo_name, **kwargs)  # noqa: E501
            return data

    def get_prefix_with_http_info(self, prefix_uuid, repo_name, **kwargs):  # noqa: E501
        """Fetch Prefix  # noqa: E501

        This service fetches a Prefix  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_prefix_with_http_info(prefix_uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefix_uuid: Uuid of the Prefix (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: BeanPrefix
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prefix_uuid', 'repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_prefix" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prefix_uuid' is set
        if self.api_client.client_side_validation and ('prefix_uuid' not in params or
                                                       params['prefix_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `prefix_uuid` when calling `get_prefix`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `get_prefix`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'prefix_uuid' in params:
            path_params['prefixUuid'] = params['prefix_uuid']  # noqa: E501
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/qudv/prefix/{prefixUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BeanPrefix',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_prefixes(self, repo_name, **kwargs):  # noqa: E501
        """Fetch a list of prefixes  # noqa: E501

        This service fetches the Prefixes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_prefixes(repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: list[BeanPrefix]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_prefixes_with_http_info(repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_prefixes_with_http_info(repo_name, **kwargs)  # noqa: E501
            return data

    def get_prefixes_with_http_info(self, repo_name, **kwargs):  # noqa: E501
        """Fetch a list of prefixes  # noqa: E501

        This service fetches the Prefixes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_prefixes_with_http_info(repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: list[BeanPrefix]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_prefixes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `get_prefixes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/qudv/prefixes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BeanPrefix]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_quantity_kind(self, quantity_kind_uuid, repo_name, **kwargs):  # noqa: E501
        """Fetch QuantityKind  # noqa: E501

        This service fetches a QuantityKind  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_quantity_kind(quantity_kind_uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quantity_kind_uuid: Uuid of the QuantityKind (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: ABeanQuantityKind
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_quantity_kind_with_http_info(quantity_kind_uuid, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_quantity_kind_with_http_info(quantity_kind_uuid, repo_name, **kwargs)  # noqa: E501
            return data

    def get_quantity_kind_with_http_info(self, quantity_kind_uuid, repo_name, **kwargs):  # noqa: E501
        """Fetch QuantityKind  # noqa: E501

        This service fetches a QuantityKind  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_quantity_kind_with_http_info(quantity_kind_uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quantity_kind_uuid: Uuid of the QuantityKind (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: ABeanQuantityKind
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quantity_kind_uuid', 'repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_quantity_kind" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'quantity_kind_uuid' is set
        if self.api_client.client_side_validation and ('quantity_kind_uuid' not in params or
                                                       params['quantity_kind_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quantity_kind_uuid` when calling `get_quantity_kind`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `get_quantity_kind`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'quantity_kind_uuid' in params:
            path_params['quantityKindUuid'] = params['quantity_kind_uuid']  # noqa: E501
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/qudv/quantityKind/{quantityKindUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ABeanQuantityKind',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_quantity_kinds(self, repo_name, **kwargs):  # noqa: E501
        """Fetch a list of quantity kinds  # noqa: E501

        This service fetches the QuantityKinds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_quantity_kinds(repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: list[ABeanQuantityKind]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_quantity_kinds_with_http_info(repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_quantity_kinds_with_http_info(repo_name, **kwargs)  # noqa: E501
            return data

    def get_quantity_kinds_with_http_info(self, repo_name, **kwargs):  # noqa: E501
        """Fetch a list of quantity kinds  # noqa: E501

        This service fetches the QuantityKinds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_quantity_kinds_with_http_info(repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: list[ABeanQuantityKind]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_quantity_kinds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `get_quantity_kinds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/qudv/quantityKinds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ABeanQuantityKind]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_unit(self, unit_uuid, repo_name, **kwargs):  # noqa: E501
        """Fetch Unit  # noqa: E501

        This service fetches a Unit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_unit(unit_uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unit_uuid: Uuid of the Unit (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: ABeanUnit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_unit_with_http_info(unit_uuid, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_unit_with_http_info(unit_uuid, repo_name, **kwargs)  # noqa: E501
            return data

    def get_unit_with_http_info(self, unit_uuid, repo_name, **kwargs):  # noqa: E501
        """Fetch Unit  # noqa: E501

        This service fetches a Unit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_unit_with_http_info(unit_uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str unit_uuid: Uuid of the Unit (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: ABeanUnit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unit_uuid', 'repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unit_uuid' is set
        if self.api_client.client_side_validation and ('unit_uuid' not in params or
                                                       params['unit_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `unit_uuid` when calling `get_unit`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `get_unit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unit_uuid' in params:
            path_params['unitUuid'] = params['unit_uuid']  # noqa: E501
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/qudv/unit/{unitUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ABeanUnit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_units(self, repo_name, **kwargs):  # noqa: E501
        """Fetch a list of units  # noqa: E501

        This service fetches the Units  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_units(repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: list[ABeanUnit]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_units_with_http_info(repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_units_with_http_info(repo_name, **kwargs)  # noqa: E501
            return data

    def get_units_with_http_info(self, repo_name, **kwargs):  # noqa: E501
        """Fetch a list of units  # noqa: E501

        This service fetches the Units  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_units_with_http_info(repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: list[ABeanUnit]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_units" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `get_units`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/qudv/units', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ABeanUnit]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_prefix_kind(self, body, repo_name, **kwargs):  # noqa: E501
        """Put Prefix  # noqa: E501

        This service updates an existing Prefix  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_prefix_kind(body, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BeanPrefix body: Prefix to put (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_prefix_kind_with_http_info(body, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.put_prefix_kind_with_http_info(body, repo_name, **kwargs)  # noqa: E501
            return data

    def put_prefix_kind_with_http_info(self, body, repo_name, **kwargs):  # noqa: E501
        """Put Prefix  # noqa: E501

        This service updates an existing Prefix  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_prefix_kind_with_http_info(body, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BeanPrefix body: Prefix to put (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_prefix_kind" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `put_prefix_kind`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `put_prefix_kind`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/qudv/prefix', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_quantity_kind(self, body, repo_name, **kwargs):  # noqa: E501
        """Put QuantityKind  # noqa: E501

        This service updates an existing QuantityKind  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_quantity_kind(body, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ABeanQuantityKind body: QuantityKind to put (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_quantity_kind_with_http_info(body, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.put_quantity_kind_with_http_info(body, repo_name, **kwargs)  # noqa: E501
            return data

    def put_quantity_kind_with_http_info(self, body, repo_name, **kwargs):  # noqa: E501
        """Put QuantityKind  # noqa: E501

        This service updates an existing QuantityKind  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_quantity_kind_with_http_info(body, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ABeanQuantityKind body: QuantityKind to put (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_quantity_kind" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `put_quantity_kind`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `put_quantity_kind`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/qudv/quantityKind', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_unit(self, body, repo_name, **kwargs):  # noqa: E501
        """Put Unit  # noqa: E501

        This service updates an existing Unit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_unit(body, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ABeanUnit body: Unit to put (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_unit_with_http_info(body, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.put_unit_with_http_info(body, repo_name, **kwargs)  # noqa: E501
            return data

    def put_unit_with_http_info(self, body, repo_name, **kwargs):  # noqa: E501
        """Put Unit  # noqa: E501

        This service updates an existing Unit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_unit_with_http_info(body, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ABeanUnit body: Unit to put (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_unit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `put_unit`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `put_unit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/qudv/unit', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
