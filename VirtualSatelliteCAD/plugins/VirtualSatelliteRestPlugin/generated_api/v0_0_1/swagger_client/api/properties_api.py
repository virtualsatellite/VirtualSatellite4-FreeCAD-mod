# coding: utf-8

"""
    The Model API

    API to access the Virtual Satellite data model  # noqa: E501

    OpenAPI spec version: v0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from plugins.VirtualSatelliteRestPlugin.generated_api.v0_0_1.swagger_client.api_client import ApiClient


class PropertiesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_property(self, property_uuid, repo_name, **kwargs):  # noqa: E501
        """Fetch Property  # noqa: E501

        This service fetches a Property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_property(property_uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_uuid: Uuid of the property (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: ABeanProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_property_with_http_info(property_uuid, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_property_with_http_info(property_uuid, repo_name, **kwargs)  # noqa: E501
            return data

    def get_property_with_http_info(self, property_uuid, repo_name, **kwargs):  # noqa: E501
        """Fetch Property  # noqa: E501

        This service fetches a Property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_property_with_http_info(property_uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_uuid: Uuid of the property (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: ABeanProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_uuid', 'repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_uuid' is set
        if self.api_client.client_side_validation and ('property_uuid' not in params or
                                                       params['property_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `property_uuid` when calling `get_property`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `get_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_uuid' in params:
            path_params['propertyUuid'] = params['property_uuid']  # noqa: E501
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/property/{propertyUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ABeanProperty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_resource(self, property_uuid, repo_name, **kwargs):  # noqa: E501
        """Fetch property resource  # noqa: E501

        This service fetches the resource of a property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resource(property_uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_uuid: Uuid of the property (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_resource_with_http_info(property_uuid, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_resource_with_http_info(property_uuid, repo_name, **kwargs)  # noqa: E501
            return data

    def get_resource_with_http_info(self, property_uuid, repo_name, **kwargs):  # noqa: E501
        """Fetch property resource  # noqa: E501

        This service fetches the resource of a property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resource_with_http_info(property_uuid, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_uuid: Uuid of the property (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_uuid', 'repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_uuid' is set
        if self.api_client.client_side_validation and ('property_uuid' not in params or
                                                       params['property_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `property_uuid` when calling `get_resource`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `get_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_uuid' in params:
            path_params['propertyUuid'] = params['property_uuid']  # noqa: E501
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/property/{propertyUuid}/resource', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_property(self, body, repo_name, **kwargs):  # noqa: E501
        """Put Property  # noqa: E501

        This service updates an existing Property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_property(body, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ABeanProperty body: Property to put (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_property_with_http_info(body, repo_name, **kwargs)  # noqa: E501
        else:
            (data) = self.put_property_with_http_info(body, repo_name, **kwargs)  # noqa: E501
            return data

    def put_property_with_http_info(self, body, repo_name, **kwargs):  # noqa: E501
        """Put Property  # noqa: E501

        This service updates an existing Property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_property_with_http_info(body, repo_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ABeanProperty body: Property to put (required)
        :param str repo_name: Name of the repository (required)
        :param bool sync: Synchronize with the repository on this request
        :param bool build: Build when synchronizing on this request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'repo_name', 'sync', 'build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `put_property`")  # noqa: E501
        # verify the required parameter 'repo_name' is set
        if self.api_client.client_side_validation and ('repo_name' not in params or
                                                       params['repo_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo_name` when calling `put_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repo_name' in params:
            path_params['repoName'] = params['repo_name']  # noqa: E501

        query_params = []
        if 'sync' in params:
            query_params.append(('sync', params['sync']))  # noqa: E501
        if 'build' in params:
            query_params.append(('build', params['build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repository/{repoName}/property', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
